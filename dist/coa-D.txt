De multiplexer:-
-----------------
library IEEE;
use IEEE.STD_LOGIC_1164.ALL;

-- Entity Declaration
entity Demux_1to4 is
    Port (
        D : in STD_LOGIC;              -- Input Data
        Sel : in STD_LOGIC_VECTOR(1 downto 0);  -- 2-bit Select Lines
        Y : out STD_LOGIC_VECTOR(3 downto 0)    -- 4 Outputs
    );
end Demux_1to4;

-- Architecture Definition
architecture Behavioral of Demux_1to4 is
begin
    process (D, Sel)
    begin
        -- Default output is all zeros
        Y <= "0000";

        -- Route input D to the selected output based on Sel
        case Sel is
            when "00" => Y(0) <= D;
            when "01" => Y(1) <= D;
            when "10" => Y(2) <= D;
            when "11" => Y(3) <= D;
            when others => Y <= "0000";  -- Default case
        end case;
    end process;
end Behavioral;



NOR gate
---------
library IEEE;
use IEEE.STD_LOGIC_1164.ALL;

-- Entity Declaration
entity NOR_Gate is
    Port (
        A : in STD_LOGIC;  -- Input A
        B : in STD_LOGIC;  -- Input B
        Y : out STD_LOGIC  -- Output Y
    );
end NOR_Gate;

-- Architecture Definition
architecture Behavioral of NOR_Gate is
begin
    -- NOR Gate Logic
    Y <= not (A or B);  -- NOR operation
end Behavioral;




Full Substractor
-----------------
library IEEE;
use IEEE.STD_LOGIC_1164.ALL;

-- Entity Declaration
entity Full_Subtractor is
    Port (
        A       : in  STD_LOGIC;  -- Minuend
        B       : in  STD_LOGIC;  -- Subtrahend
        Borrow_In : in  STD_LOGIC;  -- Borrow In
        Difference : out STD_LOGIC;  -- Difference Output
        Borrow_Out : out STD_LOGIC   -- Borrow Out
    );
end Full_Subtractor;

-- Architecture Definition
architecture Behavioral of Full_Subtractor is
begin
    -- Full Subtractor Logic
    Difference <= (A xor B) xor Borrow_In;   -- Difference Logic
    Borrow_Out <= (not A and B) or ((not A or B) and Borrow_In); -- Borrow Out Logic
end Behavioral;



Multiplexer
------------
library IEEE;
use IEEE.STD_LOGIC_1164.ALL;

-- Entity Declaration
entity Mux_4to1 is
    Port (
        D : in STD_LOGIC_VECTOR(3 downto 0);  -- 4 Inputs
        Sel : in STD_LOGIC_VECTOR(1 downto 0);  -- 2-bit Select Lines
        Y : out STD_LOGIC  -- Output
    );
end Mux_4to1;

-- Architecture Definition
architecture Behavioral of Mux_4to1 is
begin
    process (D, Sel)
    begin
        case Sel is
            when "00" => Y <= D(0);  -- Select Input 0
            when "01" => Y <= D(1);  -- Select Input 1
            when "10" => Y <= D(2);  -- Select Input 2
            when "11" => Y <= D(3);  -- Select Input 3
            when others => Y <= '0'; -- Default case
        end case;
    end process;
end Behavioral;




Full Adder
-----------

library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.STD_LOGIC_ARITH.ALL;
use IEEE.STD_LOGIC_UNSIGNED.ALL;

-- Full Adder entity declaration
entity Full_Adder is
    Port ( A      : in  STD_LOGIC;  -- Input A
           B      : in  STD_LOGIC;  -- Input B
           Cin    : in  STD_LOGIC;  -- Carry Input
           Sum    : out STD_LOGIC;  -- Sum output
           Cout   : out STD_LOGIC   -- Carry output
           );
end Full_Adder;

-- Full Adder architecture definition
architecture Behavioral of Full_Adder is
begin
    -- Process to calculate Sum and Carry
    process(A, B, Cin)
    begin
        -- Sum calculation (A XOR B XOR Cin)
        Sum <= (A XOR B) XOR Cin;
        
        -- Carry calculation (A AND B) OR (Cin AND (A XOR B))
        Cout <= (A AND B) OR (Cin AND (A XOR B));
    end process;
end Behavioral;


AND GATE
----------
library IEEE;
use IEEE.std_logic_1164.all;

-- Entity declaration

entity andGate is

    port(A : in std_logic;      -- AND gate input
         B : in std_logic;      -- AND gate input
         Y : out std_logic);    -- AND gate output

end andGate;

-- Dataflow Modelling Style
-- Architecture definition

architecture andLogic of andGate is

 begin
    
    Y <= A AND B;

end andLogic; 


OR GATE
---------
library IEEE;
use IEEE.std_logic_1164.all;

-- Entity declaration

entity orGate is

    port(A : in std_logic;      -- OR gate input
         B : in std_logic;      -- OR gate input
         Y : out std_logic);    -- OR gate output

end orGate;

-- Dataflow Modelling Style
-- Architecture definition

architecture orLogic of orGate is

 begin
    
    Y <= A OR B;

end orLogic;


NAND GATE
-----------

library IEEE;
use IEEE.STD_LOGIC_1164.ALL;

entity nand_nor_top is
    Port ( A1 : in  STD_LOGIC;      -- NAND gate input 1
           A2 : in  STD_LOGIC;      -- NAND gate input 2
           X1 : out  STD_LOGIC;     -- NAND gate output
           B1 : in  STD_LOGIC;      -- NOR gate input 1
           B2 : in  STD_LOGIC;      -- NOR gate input 2
           Y1 : out  STD_LOGIC);    -- NOR gate output
end nand_nor_top;

architecture Behavioral of nand_nor_top is
begin
X1 <= A1 nand A2;    -- 2 input NAND gate
Y1 <= B1 nor B2;     -- 2 input NOR gate
end Behavioral;


ALU
---------

LIBRARY ieee;
USE ieee.std_logic_1164.ALL;
use IEEE.std_logic_unsigned.all;
 
ENTITY tb_ALU IS
END tb_ALU;
 
ARCHITECTURE behavior OF tb_ALU IS 
 
    -- Component Declaration for the Unit Under Test (UUT)
 
    COMPONENT ALU
    PORT(
         A : IN  std_logic_vector(7 downto 0);
         B : IN  std_logic_vector(7 downto 0);
         ALU_Sel : IN  std_logic_vector(3 downto 0);
         ALU_Out : OUT  std_logic_vector(7 downto 0);
         Carryout : OUT  std_logic
        );
    END COMPONENT;
       --Inputs
   signal A : std_logic_vector(7 downto 0) := (others => '0');
   signal B : std_logic_vector(7 downto 0) := (others => '0');
   signal ALU_Sel : std_logic_vector(3 downto 0) := (others => '0');

  --Outputs
   signal ALU_Out : std_logic_vector(7 downto 0);
   signal Carryout : std_logic;
 
 signal i:integer;
BEGIN
 
   uut: ALU PORT MAP (
          A => A,
          B => B,
          ALU_Sel => ALU_Sel,
          ALU_Out => ALU_Out,
          Carryout => Carryout
        );

 
   stim_proc: process
   begin  
      -- hold reset state for 100 ns.
      A <= x"0A";
  B <= x"02";
  ALU_Sel <= x"0";
  
  for i in 0 to 15 loop 
   ALU_Sel <= ALU_Sel + x"1";
   wait for 100 ns;
  end loop;
      A <= x"F6";
  B <= x"0A";
      wait;
   end process;

END;



NOT GATE
-----------

library IEEE;
use IEEE.std_logic_1164.all;
entity not_gate is
    port(A : in std_logic;          
         Y : out std_logic); 
end not_gate;
architecture notLogic of not_gate is
begin
    Y <= not(A) ;
end notLogic;