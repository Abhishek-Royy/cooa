#include <stdio.h>
#include <stdlib.h>

// Define the node structure
struct Node {
    int data;
    struct Node* next;
};

// Function to delete a node at the beginning of the list
void deleteAtBeginning(struct Node** head) {
    if (*head == NULL) {
        printf("List is empty, nothing to delete.\n");
        return;
    }

    struct Node* temp = *head;
    *head = (*head)->next;
    free(temp);
    printf("Node deleted at the beginning.\n");
}

// Function to delete a node at a specific position
void deleteAtPosition(struct Node** head, int position) {
    if (*head == NULL) {
        printf("List is empty, nothing to delete.\n");
        return;
    }

    struct Node* temp = *head;

    // If the position is the first node
    if (position == 0) {
        *head = temp->next;
        free(temp);
        printf("Node deleted at position %d.\n", position);
        return;
    }

    // Find the previous node of the node to be deleted
    for (int i = 0; temp != NULL && i < position - 1; i++) {
        temp = temp->next;
    }

    // If the position is more than the number of nodes
    if (temp == NULL || temp->next == NULL) {
        printf("Position out of range.\n");
        return;
    }

    // Node temp->next is the node to be deleted
    struct Node* nodeToDelete = temp->next;
    temp->next = temp->next->next;
    free(nodeToDelete);
    printf("Node deleted at position %d.\n", position);
}

// Function to print the linked list
void printList(struct Node* head) {
    if (head == NULL) {
        printf("List is empty.\n");
        return;
    }

    struct Node* temp = head;
    while (temp != NULL) {
        printf("%d -> ", temp->data);
        temp = temp->next;
    }
    printf("NULL\n");
}

// Function to insert a new node at the end of the list
void append(struct Node** head, int newData) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    struct Node* last = *head;

    newNode->data = newData;
    newNode->next = NULL;

    if (*head == NULL) {
        *head = newNode;
        return;
    }

    while (last->next != NULL) {
        last = last->next;
    }
    last->next = newNode;
}

int main() {
    struct Node* head = NULL;

    // Append nodes to the list
    append(&head, 10);
    append(&head, 20);
    append(&head, 30);
    append(&head, 40);

    printf("Initial list:\n");
    printList(head);

    // Delete node at the beginning
    deleteAtBeginning(&head);
    printf("List after deletion at the beginning:\n");
    printList(head);

    // Delete node at position 1 (second element)
    deleteAtPosition(&head, 1);
    printf("List after deletion at position 1:\n");
    printList(head);

    return 0;
}




Output
---------
Initial list:
10 -> 20 -> 30 -> 40 -> NULL
Node deleted at the beginning.
List after deletion at the beginning:
20 -> 30 -> 40 -> NULL
Node deleted at position 1.
List after deletion at position 1:
20 -> 40 -> NULL
