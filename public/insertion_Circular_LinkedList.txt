#include <stdio.h>
#include <stdlib.h>

// Define the structure of a node in a circular linked list
struct Node {
    int data;
    struct Node *next;
};

// Function to insert a node at the beginning of the circular linked list
void insertAtBeginning(struct Node **head, int newData) {
    // Allocate memory for the new node
    struct Node *newNode = (struct Node*)malloc(sizeof(struct Node));

    // Check if memory allocation was successful
    if (newNode == NULL) {
        printf("Memory allocation failed!\n");
        return;
    }

    // Set the data for the new node
    newNode->data = newData;

    // If the list is empty, set the new node to point to itself
    if (*head == NULL) {
        *head = newNode;
        newNode->next = *head;
    } else {
        // Traverse to the last node (the node that points to head)
        struct Node *temp = *head;
        while (temp->next != *head) {
            temp = temp->next;
        }

        // Insert the new node at the beginning
        temp->next = newNode;
        newNode->next = *head;
        *head = newNode;
    }

    printf("Node with data %d inserted at the beginning.\n", newData);
}

// Function to display the circular linked list
void displayList(struct Node *head) {
    if (head == NULL) {
        printf("List is empty.\n");
        return;
    }

    struct Node *temp = head;
    do {
        printf("%d -> ", temp->data);
        temp = temp->next;
    } while (temp != head);
    printf("(head)\n");
}

int main() {
    struct Node *head = NULL;

    // Insert nodes at the beginning
    insertAtBeginning(&head, 10);
    insertAtBeginning(&head, 20);
    insertAtBeginning(&head, 30);

    // Display the circular linked list
    displayList(head);

    return 0;
}




Output
-----------
Node with data 10 inserted at the beginning.
Node with data 20 inserted at the beginning.
Node with data 30 inserted at the beginning.
30 -> 20 -> 10 -> (head)
