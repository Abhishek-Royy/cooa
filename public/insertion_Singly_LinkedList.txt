#include <stdio.h>
#include <stdlib.h>

// Definition of node structure
struct Node {
    int data;
    struct Node* next;
};

// Function to insert at the beginning
void insertAtBeginning(struct Node** head, int newData) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = newData;
    newNode->next = *head;  // Link the new node to the previous head
    *head = newNode;        // Move the head to the new node
}

// Function to insert at the end
void insertAtEnd(struct Node** head, int newData) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    struct Node* temp = *head;

    newNode->data = newData;
    newNode->next = NULL;

    // If the list is empty, make the new node the head
    if (*head == NULL) {
        *head = newNode;
        return;
    }

    // Traverse the list and find the last node
    while (temp->next != NULL) {
        temp = temp->next;
    }
    
    // Link the last node to the new node
    temp->next = newNode;
}

// Function to display the list
void displayList(struct Node* head) {
    struct Node* temp = head;
    if (temp == NULL) {
        printf("The list is empty.\n");
        return;
    }
    
    while (temp != NULL) {
        printf("%d -> ", temp->data);
        temp = temp->next;
    }
    printf("NULL\n");
}

// Main function to test the insertion operations
int main() {
    struct Node* head = NULL;

    // Inserting at the beginning
    insertAtBeginning(&head, 10);
    insertAtBeginning(&head, 20);
    insertAtBeginning(&head, 30);

    printf("List after insertion at beginning:\n");
    displayList(head);

    // Inserting at the end
    insertAtEnd(&head, 40);
    insertAtEnd(&head, 50);

    printf("List after insertion at end:\n");
    displayList(head);

    return 0;
}



Output
----------
List after insertion at beginning:
30 -> 20 -> 10 -> NULL
List after insertion at end:
30 -> 20 -> 10 -> 40 -> 50 -> NULL
